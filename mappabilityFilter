#! /usr/bin/env python3
#
# Vivek Rai
# vivekrai@umich.edu
# (c) Parker Lab
#
# November 11, 2018
# GPL License

import argparse
import subprocess
import sys
import os

__description__ = """
    mappabilityFilter

    Removes regions specifies in the "blacklist" files from the "input" file.
"""


blacklist = {
    "hg19": [
        "/lab/data/reference/human/hg19/annot/wgEncodeDacMapabilityConsensusExcludable.bed.gz",
        "/lab/data/reference/human/hg19/annot/wgEncodeDukeMapabilityRegionsExcludable.bed.gz",
    ],
    "mm9": ["/lab/work/vivekrai/data/reference/mouse/mm9/annot/mm9.blacklist.bed"],
    "rn6": ["/home/vivekrai/data/reference/rat/rn6/annot/rn6.blacklist.1.bed.gz"],
}


def mappability_filter(args):
    if (args.genome not in blacklist) and (args.blacklist):
        print("Error: Genome not found and no blacklist provided!", file=sys.stderr)
        sys.exit(1)

    if args.input == "stdin" and sys.stdin.isatty():
        print("STDIN is empty.", file=sys.stderr)
        sys.exit(0)

    if args.input != "stdin" and not os.path.exists(args.input):
        print("Error: Input file not found.", file=sys.stderr)
        sys.exit(1)

    blacklist[args.genome].extend(args.blacklist)

    def bl_string(delim):
        return delim.join(blacklist[args.genome])

    print(f"Using blacklists:\n {bl_string('; ')}", file=sys.stderr)
    cmd_string = f"intersectBed -a {args.input} -b {bl_string(' ')} -v"

    cmd = subprocess.Popen(cmd_string, shell=True)
    cmd.communicate()


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description=__description__)

    parser.add_argument("-i", "--input", default="stdin", help="BED (file/input)")
    parser.add_argument(
        "-g", "--genome", default="hg19", help="Genome (for blacklists, default: hg19)"
    )
    parser.add_argument(
        "-b", "--blacklist", default=[], nargs="+", help="Blacklist files"
    )

    args = parser.parse_args()

    mappability_filter(args)
